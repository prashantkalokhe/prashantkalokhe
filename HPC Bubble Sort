#include<iostream>

#include<stdlib.h>

#include<omp.h>

#include<time.h>

#define max 20

using namespace std;

 

//void bubble(int *, int);

//void swap(int &, int &);

 

 

 

 

int main()

{

 

    int a[max];

 

    float t_1; // Execution time measures

        clock_t c_1, c_2;

c_1=clock();

    for(int i=0;i<max;i++)

    {

        a[i]=rand()%10;

    }

    cout<<" Unsorted Elements \n";

    for(int i=0;i<max;i++)

        {

            cout<<a[i]<<endl;

        }

 

    for(  int i = 0;  i <max;  i++ )

         {

            int first = i % 2;

 

            #pragma omp parallel for shared(a,first)

 

            for(  int j = first;  j < max-1;  j += 2  )

              {

                if(  a[ j ]  >  a[ j+1 ]  )

                 {

                    int test;

                        test=a[j];

                        a[j]=a[j+1];

                        a[j+1]=test;

                 }

                  }

         }

 

 

 

    cout<<"\n sorted array is=>\n";

    for(int i=0;i<max;i++)

    {

        cout<<a[i]<<endl;

    }

    c_2=clock();

    /* TIME MEASURE + OUTPUT */

        c_2=clock();  // time measure:

        t_1 = (float)(c_2-c_1)/CLOCKS_PER_SEC; // in seconds; - time elapsed for job row-wise

        cout<<"Execution time(in seconds) \n"<<t_1;

 

 

return 0;

}

Output :-

Unsorted Elements 

3

6

7

5

3

5

6

2

9

1

2

7

0

9

3

6

0

6

2

6

 

 sorted array is=>

0

0

1

2

2

2

3

3

3

5

5

6

6

6

6

6

7

7

9

9

Execution time(in seconds) 

8.9e-05

